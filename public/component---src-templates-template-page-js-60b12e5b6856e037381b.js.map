{"version":3,"sources":["webpack:///./src/components/StartScreen.js","webpack:///./src/Contexts/GlobalContext.js","webpack:///./src/components/Keyboard.js","webpack:///./src/components/Word.js","webpack:///./src/components/ReferenceText.js","webpack:///./src/components/OutputText.js","webpack:///./src/components/Info.js","webpack:///./src/components/ActivityScreen.js","webpack:///./src/components/EndScreen.js","webpack:///./src/components/App.js","webpack:///./src/templates/TemplatePage.js"],"names":["StartScreen","setState","state","data-testid","className","title","description","id","onClick","startScreenActive","activityScreenActive","defaultProps","lessonTitle","GlobalContext","createContext","Keyboard","keys","useContext","shiftKey","activeKey","useState","keysSet","setKeysSet","enabledKeys","setEnableKeys","isMac","navigator","userAgent","includes","specialKey","split","console","log","keyLayout","row1","row2","row3","row4","row5","map","key","i","toLowerCase","Word","props","text","active","correct","curWordRef","useRef","useEffect","current","scrollIntoView","behavior","inline","ref","MomoedWord","memo","ReferenceText","refWords","activeWordIndex","correctWords","activityType","word","index","OutputText","userInput","setUserInput","setActiveWordIndex","startCounting","setStartCounting","setCorrectWords","inputRef","outputText","userStats","setUserStats","value","onChange","e","target","length","endsWith","data","trim","newResult","Info","timeElapsed","setTimeElapsed","handleReset","errors","filter","item","correctCount","Boolean","completed","speed","toFixed","setInterval","oldTime","clearInterval","timed","progress","incorrect","missed","endScreenActive","ActivityScreen","EndScreen","handleRestart","total","App","getWords","referenceText","sort","Math","random","setCorrectCount","setOutputText","setShiftKey","setActiveKey","handleKeyDown","focus","preventDefault","test","handleKeyUp","document","addEventListener","Provider","TemplatePage","interactiveData","sampleDataJson","startImage","slug"],"mappings":"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","file":"component---src-templates-template-page-js-60b12e5b6856e037381b.js","sourcesContent":["import PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst StartScreen = ({ setState, state }) => {\n    return (\n        <main data-testid=\"start\" className=\"StartScreen\">\n            <h1>Start Screen</h1>\n            <h2 className=\"lesson-title\">{state.title}</h2>\n            <h3 className=\"intro-title\">{state.description}</h3>\n            <button\n                id=\"start\"\n                className=\"btn-start btn\"\n                onClick={() =>\n                    setState({\n                        ...state,\n                        startScreenActive: false,\n                        activityScreenActive: true,\n                    })\n                }\n            >\n                Start\n            </button>\n        </main>\n    )\n}\nStartScreen.propTypes = {\n    title: PropTypes.string,\n    description: PropTypes.string,\n    startActivity: PropTypes.func,\n}\n\nStartScreen.defaultProps = {\n    title: ``,\n    lessonTitle: ``,\n}\n\nexport default StartScreen","import { createContext } from \"react\";\n\nexport const GlobalContext = createContext({})","import React, { useContext, useState } from 'react'\nimport { GlobalContext } from '../Contexts/GlobalContext'\nimport '../styles/keyboard.css'\n\nfunction Keyboard() {\n    const { state, shiftKey, activeKey } = useContext(GlobalContext)\n    const [keysSet, setKeysSet] = useState(false)\n    const [enabledKeys, setEnableKeys] = useState([])\n    const isMac = navigator.userAgent.includes('Mac');\n\n    let specialKey = 'ctrl'\n    if (!keysSet) {\n        let keys\n        if (state.enabledKeys == 'all') {\n            keys = ['`', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', '~', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+',\n                'tab', 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',\n                'caps lock', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';', '\\'', 'enter', ':', '\"', '<', '>', '?',\n                'shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '/', 'shift', 'space', specialKey]\n        } else {\n            keys = state.enabledKeys.split(' ')\n        }\n        if (!isMac) {\n            specialKey = 'cmd'\n            console.log('mac')\n        }\n        setEnableKeys(keys)\n        setKeysSet(true)\n    }\n\n    // const newKeys = state.enabledKeys.split(' ')\n    let keyLayout = {\n        row1: ['`', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '='],\n        row2: ['tab', 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n        row3: ['caps lock', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';', '\\'', 'enter'],\n        row4: ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '/', 'shift'],\n        row5: [specialKey, 'space', specialKey],\n    }\n\n    if (shiftKey) {\n        keyLayout = {\n            row1: ['~', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+'],\n            row2: ['tab', 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n            row3: ['caps lock', 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':', '\"', 'enter'],\n            row4: ['shift', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', '<', '>', '?', 'shift'],\n            row5: [specialKey, 'space', specialKey],\n        }\n    }\n\n    return (\n        <div className='keyboard-con'>\n            <div className=\"row row-1\">\n                {keyLayout.row1.map((key, i) =>\n                    <div\n                        className={`key ${key} ${key === activeKey ? 'active' : ''} ${enabledKeys.includes(key.toLowerCase()) ? 'enabled' : 'disabled'}`}\n                        key={i}\n                    >{key}</div>\n                )}\n            </div>\n            <div className=\"row row-2\">\n                {keyLayout.row2.map((key, i) =>\n                    <div\n                        className={`key ${key} ${key === activeKey ? 'active' : ''} ${enabledKeys.includes(key.toLowerCase()) ? 'enabled' : 'disabled'}`}\n                        key={i}\n                    >{key}</div>\n                )}\n            </div>\n            <div className=\"row row-3\">\n                {keyLayout.row3.map((key, i) =>\n                    <div\n                        className={`key ${key} ${key === activeKey ? 'active' : ''} ${enabledKeys.includes(key.toLowerCase()) ? 'enabled' : 'disabled'}`}\n                        key={i}\n                    >{key}</div>\n                )}\n            </div>\n            <div className=\"row row-4\">\n                {keyLayout.row4.map((key, i) => {\n                    if (key === 'shift') {\n                        return <div\n                            className={`key ${key} ${shiftKey ? 'active' : ''} ${enabledKeys.includes(key.toLowerCase()) ? 'enabled' : 'disabled'}`}\n                            key={i}\n                        >{key}</div>\n                    } else {\n                        return <div\n                            className={`key ${key} ${key === activeKey ? 'active' : ''} ${enabledKeys.includes(key.toLowerCase()) ? 'enabled' : 'disabled'}`}\n                            key={i}\n                        >{key}</div>\n                    }\n                }\n                )}\n            </div>\n            <div className=\"row row-5\">\n                {keyLayout.row5.map((key, i) =>\n                    <div\n                        className={`key ${key} ${key === activeKey ? 'active' : ''}  ${enabledKeys.includes(key.toLowerCase()) ? 'enabled' : 'disabled'}`}\n                        key={i}\n                    >{key}</div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default Keyboard","import React, { useRef, useEffect } from 'react'\n// import { GlobalContext } from '../Contexts/GlobalContext'\n\nfunction Word(props) {\n    const { text, active, correct } = props\n    const curWordRef = useRef(null)\n\n    useEffect(() => {\n        if (curWordRef.current) {\n            curWordRef.current.scrollIntoView({\n                behavior: \"smooth\",\n                inline: \"end\"\n            })\n        }\n    }, [active])\n\n    if (correct) {\n        return <span className='correct'>{text} </span>\n    }\n    if (correct === false) {\n        return <span className='incorrect'>{text} </span>\n    }\n    if (active) {\n        return <span className='active' ref={curWordRef}>{text} </span>\n    }\n\n    return (\n        <span>{text} </span>\n    )\n}\n\nexport default Word","import React, { useContext, memo } from 'react'\nimport { GlobalContext } from '../Contexts/GlobalContext'\nimport '../styles/reference-text.css'\nimport Word from './Word'\n\nconst MomoedWord = memo(Word)\n\nfunction ReferenceText() {\n    const { state, refWords, activeWordIndex, correctWords } = useContext(GlobalContext)\n    const activityType = state.activityType\n\n    return (\n        <div className=\"reference-wrapper\">\n            {activityType === 'sentence'\n                ? <div className='text-con'>\n                    {refWords.current.map((word, index) => {\n                        return <MomoedWord\n                            key={index}\n                            text={word}\n                            active={index === activeWordIndex}\n                            correct={correctWords[index]}\n                        />\n                    })}\n                </div>\n\n                : <div className='text-con'>\n                    <div className='single-word-con'>\n                        <MomoedWord\n                            key={activeWordIndex}\n                            text={refWords.current[activeWordIndex]}\n                            correct={correctWords[activeWordIndex]}\n                        />\n                    </div>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default ReferenceText","import React, { useContext } from 'react'\nimport { GlobalContext } from '../Contexts/GlobalContext'\nimport '../styles/output-text.css'\n\nfunction OutputText() {\n    const { state, userInput, setUserInput, activeWordIndex, setActiveWordIndex, refWords, startCounting, setStartCounting, setCorrectWords, inputRef, outputText, userStats, setUserStats } = useContext(GlobalContext)\n\n    function handleInput(value) {\n        if (state.activityType === 'single-letter') {\n            value += ' '\n        }\n\n        if (activeWordIndex === refWords.current.length) {\n            return\n        }\n\n        if (!startCounting) { // start timer\n            setStartCounting(true)\n        }\n\n        if (value.endsWith(' ')) { // handle spacebar\n\n            if (activeWordIndex === refWords.current.length - 1) {\n                setStartCounting(false) // stop timer\n            }\n            // set word as completed\n            setActiveWordIndex(index => index + 1) // move to next word\n            setUserInput('')\n\n            setCorrectWords(data => {\n                const word = value.trim()\n                const newResult = [...data]\n                newResult[activeWordIndex] = word === refWords.current[activeWordIndex]\n\n                return newResult\n            })\n\n        } else {\n            setUserInput(value)\n        }\n    }\n\n    return (\n        <div className=\"text-wrapper \">\n            <input id='inputBox' ref={inputRef} value={userInput} onChange={(e) => handleInput(e.target.value)} />\n            {state.activityType === 'sentence'\n                ? <div className='text-con'>\n                    <span>{outputText.map((text, index) =>\n                        <span key={index}>{text}</span>)}</span>\n                </div>\n                : <div className='text-con'>\n                    <span>{userInput}</span>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default OutputText","import React, { useEffect, useContext } from 'react'\nimport { GlobalContext } from '../Contexts/GlobalContext'\n\nfunction Info() {\n    const { state, setState, startCounting, correctWords, timeElapsed, setTimeElapsed, refWords, handleReset, userStats, setUserStats } = useContext(GlobalContext)\n\n    const errors = correctWords.filter(item => item === false).length\n    const correctCount = correctWords.filter(Boolean).length\n    const completed = ((correctCount + errors) / refWords.current.length) * 100\n    const speed = (correctCount * (60 / timeElapsed)).toFixed(1)\n\n    useEffect(() => {\n        let id\n        if (startCounting) {\n            id = setInterval(() => {\n                setTimeElapsed(oldTime => oldTime + 1)\n            }, 1000)\n        }\n\n        return () => {\n            clearInterval(id)\n        }\n    }, [startCounting])\n\n\n    const handleEnd = () => {\n        setUserStats({\n            ...state,\n            correct: correctCount,\n            incorrect: errors,\n            missed: ['working on this'],\n            speed\n        })\n        setState({\n            ...state,\n            startScreenActive: false,\n            activityScreenActive: false,\n            endScreenActive: true,\n        })\n    }\n\n\n    return (\n        <div className='info-wrapper'>\n            {state.timed &&\n                <h2>Time:<br /><span>{timeElapsed}</span></h2>\n            }\n            {state.progress &&\n                <h2>Completed:<br />{completed.toFixed(0)}%</h2>\n            }\n            {state.errors &&\n                <h2>Errors:<br />{errors}</h2>\n            }\n            {state.speed && completed === 100 &&\n                <h2>WPM:<br /><span>{speed}</span></h2>\n            }\n            {completed === 100\n                ? <button onClick={handleEnd}>continue</button>\n                : <button onClick={handleReset}>Reset</button>\n            }\n        </div>\n    )\n}\n\nexport default Info","import React from \"react\"\nimport Keyboard from './Keyboard'\nimport ReferenceText from './ReferenceText'\nimport OutputText from './OutputText'\nimport Info from './Info'\nimport '../styles/core.css'\n\nconst ActivityScreen = () => {\n\n    return (\n        <main data-testid=\"activity\" className=\"activity-screen\">\n            <div className=\"layout-left\">\n                <ReferenceText />\n                <Keyboard />\n                <OutputText />\n            </div>\n            <div className=\"layout-right\">\n                <Info />\n            </div>\n        </main>\n    )\n}\n\nexport default ActivityScreen","import React, { useContext } from \"react\"\nimport { GlobalContext } from \"../Contexts/GlobalContext\"\n\nconst EndScreen = ({ setState, state }) => {\n    const { handleRestart, userStats, refWords } = useContext(GlobalContext)\n    const total = refWords.current.length\n    return (\n        <main data-testid=\"start\" className=\"EndScreen\">\n            <h1 className=\"intro-title\">End Screen</h1>\n            {(total - userStats.incorrect) > (total * .65)\n                ? <h3>Great Job!</h3>\n                : <h3>Try Again!</h3>\n            }\n            <p>you got <b>{userStats.correct}</b> correct out of <b>{total}</b></p>\n            <div>missed text: {userStats.missed.map(item => <span>{item}</span>)}</div>\n            <p>speed: {userStats.speed}</p>\n            <button\n                id=\"start\"\n                className=\"btn-start btn\"\n                onClick={() => handleRestart()}\n            >\n                Restart\n            </button>\n        </main>\n    )\n}\n\nexport default EndScreen","import React, { useState, useRef, useEffect } from \"react\"\nimport StartScreen from \"./StartScreen\"\nimport ActivityScreen from \"./ActivityScreen\"\nimport { GlobalContext } from '../Contexts/GlobalContext.js'\nimport EndScreen from \"./EndScreen\"\n\nconst App = ({ setState, state }) => {\n  const getWords = () => state.referenceText.split(' ').sort(() => Math.random() > 0.5 ? 1 : -1)\n  const refWords = useRef(getWords())\n  const [correctWords, setCorrectWords] = useState([])\n  const [correctCount, setCorrectCount] = useState(0)\n  const [timeElapsed, setTimeElapsed] = useState(0)\n  const [startCounting, setStartCounting] = useState(false)\n  const [outputText, setOutputText] = useState([])\n  const [userStats, setUserStats] = useState({\n    correct: 0,\n    incorrect: 0,\n    missed: [],\n    speed: 0\n  })\n\n  const [userInput, setUserInput] = useState('')\n  const [activeWordIndex, setActiveWordIndex] = useState(0)\n  const [shiftKey, setShiftKey] = useState(false)\n  const [activeKey, setActiveKey] = useState('')\n  const inputRef = useRef(null)\n\n  const handleKeyDown = (e) => {\n    if (inputRef.current) {\n      inputRef.current.focus()\n    }\n    const re = /[0-9A-F:]+/g;\n    const key = e.key\n\n    if (key === 'Shift') {\n      setShiftKey(true)\n      setActiveKey('shift')\n    } else if (key === 'Backspace') {\n      e.preventDefault()\n      return\n    } else if (key === 'Meta') {\n      e.preventDefault()\n      return\n    } else if (!re.test(key)) {\n      setActiveKey(key)\n      setOutputText(outputText => [...outputText, key])\n    } else {\n      e.preventDefault();\n      return\n    }\n  }\n\n  const handleKeyUp = (e) => {\n    // switch keybard back when shift key is released\n    const key = e.key\n    if (key === 'Shift') {\n      setShiftKey(false)\n    } else {\n      setActiveKey('')\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyDown)\n    document.addEventListener(\"keyup\", handleKeyUp)\n  }, [])\n\n  const handleReset = () => {\n    setUserInput('')\n    setStartCounting(false)\n    setTimeElapsed(0)\n    setCorrectCount(0)\n    setCorrectWords([])\n    setActiveWordIndex(0)\n    setOutputText([])\n    refWords.current = (getWords())\n  }\n\n  const handleRestart = () => {\n    handleReset()\n\n    setState({\n      ...state,\n      startScreenActive: true,\n      activityScreenActive: false,\n      endScreenActive: false,\n    })\n  }\n\n  return (\n    <main className=\"App\">\n      <GlobalContext.Provider\n        value={{\n          state, setState,\n          refWords, getWords,\n          userInput, setUserInput,\n          shiftKey, setShiftKey,\n          activeWordIndex, setActiveWordIndex,\n          correctWords, setCorrectWords,\n          correctCount, setCorrectCount,\n          timeElapsed, setTimeElapsed,\n          startCounting, setStartCounting,\n          activeKey,\n          inputRef,\n          outputText,\n          handleReset,\n          handleRestart,\n          userStats, setUserStats\n        }}\n      >\n        <div className=\"main-layout\">\n          {state.startScreenActive && (\n            <StartScreen setState={setState} state={state} />\n          )}\n          {state.activityScreenActive && (\n            <ActivityScreen setState={setState} state={state} />\n          )}\n          {state.endScreenActive && (\n            <EndScreen setState={setState} state={state} />\n          )}\n        </div>\n      </GlobalContext.Provider>\n    </main >\n  )\n}\nexport default App\n","import { graphql, withPrefix } from \"gatsby\" // withPrefix has been included for any media that needs to accessed from the data folder\nimport React, { useState } from \"react\"\nimport App from \"../components/App\"\n\n// grab the data\nexport const query = graphql`\n  query($slug: String!) {\n    sampleDataJson(slug: { eq: $slug }) {\n      slug\n      title\n      activityType\n      startImage\n      description\n      referenceText\n      timed\n      progress\n      errors\n      speed\n      enabledKeys\n    }\n  }\n`\n\nconst TemplatePage = ({ data }) => {\n  const interactiveData = data.sampleDataJson\n  const [state, setState] = useState({\n    title: interactiveData.title,\n    activityType: interactiveData.activityType,\n    startImage: interactiveData.startImage,\n    description: interactiveData.description,\n    referenceText: interactiveData.referenceText,\n    timed: interactiveData.timed,\n    progress: interactiveData.progress,\n    errors: interactiveData.errors,\n    speed: interactiveData.speed,\n    enabledKeys: interactiveData.enabledKeys,\n    startScreenActive: true,\n    activityScreenActive: false,\n    endScreenActive: false,\n  })\n\n  return (\n    <div className={`Main ${interactiveData.slug}`}>\n      <App setState={setState} state={state} />\n    </div>\n  )\n}\n\nexport default TemplatePage\n"],"sourceRoot":""}